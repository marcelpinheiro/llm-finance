import streamlit as st
import os
from dotenv import load_dotenv
from src.rag_pipeline import RAGPipeline

# Load environment variables
load_dotenv()

# Set up the Streamlit app
st.set_page_config(
    page_title="Financial Data Copilot",
    page_icon="ðŸ“Š",
    layout="wide"
)

# Initialize session state
# Always create a new pipeline instance to ensure we have the latest code
st.session_state.pipeline = RAGPipeline()

# App title and description
st.title("ðŸ“Š Financial Data Copilot")
st.markdown("""
This AI-powered assistant helps you analyze financial data and documents for the top companies.
Ask questions about financial performance, risks, strategies, and more.
""")

# Sidebar with example queries
st.sidebar.header("Example Queries")
example_queries = [
    "What was Apple's revenue in 2023?",
    "What were Apple's main risks in 2023?",
    "Compare Tesla vs Microsoft revenue growth in the last 5 years.",
    # "Summarize ESG commitments of Amazon.",
    "Which company had the highest profit margin in 2023?"
]

selected_example = st.sidebar.selectbox(
    "Try an example query:",
    [""] + example_queries
)

# Main query input
query = st.text_input(
    "Ask a question about financial data or company documents:",
    value=selected_example,
    placeholder="e.g., What were NVIDIA's key growth drivers in 2023?"
)

# Process query when submitted
if query:
    with st.spinner("Processing your query..."):
        try:
            # Process the query through the RAG pipeline
            result = st.session_state.pipeline.process_query(query)
            
            # Display the answer
            st.subheader("Answer")
            # Use st.text to ensure proper formatting without markdown interpretation
            st.text(result["answer"])
            
            # Display evidence based on classification
            st.subheader("Supporting Evidence")
            
            if result["classification"] == "STRUCTURED":
                if result["evidence"]["type"] == "structured":
                    st.markdown("**SQL Query Generated:**")
                    st.code(result["evidence"]["sql_query"], language="sql")
                    
                    st.markdown("**How the Answer Was Derived:**")
                    st.info("The answer above was generated by executing the SQL query shown above against the financial database. The raw data was then formatted for readability.")
                else:
                    st.write("No structured evidence available.")
                    
            elif result["classification"] == "UNSTRUCTURED":
                if result["evidence"]["type"] == "unstructured":
                    st.markdown("**Relevant Document Excerpts:**")
                    for i, (chunk, score) in enumerate(result["evidence"]["relevant_chunks"]):
                        with st.expander(f"Excerpt {i+1} (Similarity: {score:.4f})"):
                            st.write(chunk)
                else:
                    st.write("No unstructured evidence available.")
                    
            elif result["classification"] == "HYBRID":
                if result["evidence"]["type"] == "hybrid":
                    st.markdown("**Structured Data:**")
                    if "sql_query" in result["evidence"]["structured"]:
                        st.markdown("**SQL Query Generated:**")
                        st.code(result["evidence"]["structured"]["sql_query"], language="sql")
                        st.markdown("**How the Structured Answer Was Derived:**")
                        st.info("The structured portion of the answer was generated by executing the SQL query shown above against the financial database.")
                    else:
                        st.write(result["evidence"]["structured"]["answer"])
                    
                    st.markdown("**Document Insights:**")
                    if "relevant_chunks" in result["evidence"]["unstructured"]:
                        for i, (chunk, score) in enumerate(result["evidence"]["unstructured"]["relevant_chunks"]):
                            with st.expander(f"Excerpt {i+1} (Similarity: {score:.4f})"):
                                st.write(chunk)
                    elif "answer" in result["evidence"]["unstructured"]:
                        st.write(result["evidence"]["unstructured"]["answer"])
                    else:
                        st.write("No document insights available.")
                else:
                    st.write("No hybrid evidence available.")
            
            # Display classification
            st.sidebar.info(f"Query Type: {result['classification']}")
            
        except Exception as e:
            st.error(f"An error occurred while processing your query: {str(e)}")
            st.sidebar.error("Query Type: ERROR")

# Additional information
st.markdown("---")
st.markdown("""
### About This Tool
- **Data Sources**: Yahoo Finance, SEC EDGAR Database
- **Top Companies**: Apple, Microsoft, Google, Amazon, NVIDIA, Meta, Tesla, and others
- **Analysis Types**: Financial metrics, risk factors, strategic insights, ESG commitments
""")

# Close pipeline connection when app stops
def on_shutdown():
    if 'pipeline' in st.session_state:
        st.session_state.pipeline.close_connection()

# Note: Streamlit doesn't have a built-in shutdown hook, so we rely on session cleanup
